# -*- coding: utf-8 -*-
"""Day2_RowMatrixOperations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EMcn_kokM8FYUrj6BuUX0A8wcOCmAp_x

# **Types of Matrix** :
"""

#Importing Numpy
import numpy as np

"""##Singleton Matrix
Matrix having a single element.
"""

#Creating a Singleton Matrix using Numpy
#Creating a Singleton Matrix with 1 element
matrix = np.array([2])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""## Row Matrix

A matrix having a single row.
"""

#Creating a Row Matrix using Numpy

#Creating a Row Matrix with 3 elements
matrix = np.array([1, 2, 3])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')



"""## Column Matrix

A matrix having a single Column.
"""

#Creating a Column Matrix using Numpy
#Creating a Column Matrix with 3 elements
matrix = np.array([[1], [2], [3]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""## Zero/Null Matrix
Matrix having all of its elements as zero.
"""

#Creating a Zero/Null Matrix using Numpy
#Creating a Zero/Null Matrix with 1 element
matrix = np.array([0])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Horizontal Matrix
Matrix whose number of rows is less then number of columns.
"""

#Creating a Horizontal Matrix using Numpy
#Creating a Horizontal Matrix with 6 elements
matrix = np.array([[2,1,3],[4,5,6]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Vertical Matrix
Matrix whose number of rows is more then number of columns.
"""

#Creating a Vertical Matrix using Numpy
#Creating a Vertical Matrix with 6 elements
matrix = np.array([[2,1],[4,5],[7,8]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Square Matrix
Matrix having equal number of rows and columns
"""

#Creating a Square Matrix using Numpy
#Creating a Square Matrix with 4 elements
matrix = np.array([[2,1],[4,5]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Upper Triangular Matrix
A square matrix(having equal number of rows and columns) is said to be an upper traingular matrix, if all the elements below the principal diagnol is zero.
"""

#Creating a Upper Triangluar Matrix using Numpy
#Creating a Upper Triangluar Matrix with 6 elements
matrix = np.array([[2,1,4],[0,4,5],[0,0,8]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Lower Triangular Matrix
A square matrix(having equal number of rows and columns) is said to be an lower traingular matrix, if all the elements above the principal diagnol is zero.
"""

#Creating a Lower Triangluar Matrix using Numpy
#Creating a Lower Triangluar Matrix with 6 elements
matrix = np.array([[2,0,0],[7,4,0],[1,5,8]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Symmetric Matrix
A square matrix(having equal number of rows and columns) is said to be symmetric if its transpose is equal to the original matrix.
"""

#Creating a Symmetric Matrix using Numpy
#Creating a Symmetric Matrix with 9 elements
matrix = np.array([[2,1,3],[1,4,7],[3,7,8]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Skew-Symmetric Matrix
A square matrix(having equal number of rows and columns) is said to be skew-symmetric if its transpose is equal to the negative of the original matrix.
"""

#Creating a Skew-Symmetric Matrix using Numpy
#Creating a Skew-Symmetric Matrix with 9 elements
matrix = np.array([[-2,1,-3],[-1,-4,7],[3,-7,8]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Identity Matrix
A square matrix(having equal number of rows and columns) is said to be an Identity Matrix if the Diagnol elements are 1 and all other elements are 0.
"""

#Creating a Identity Matrix using Numpy
#Creating a Identity Matrix with 4 elements
matrix = np.array([[1,0],[0,1]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Orthogonal Matrix
A square matrix(having equal number of rows and columns) is said to be an orthogonal matrix when it being multiplied by its transpose results in a identity matrix.
"""

#Creating a Skew-Symmetric Matrix using Numpy
#Creating a Skew-Symmetric Matrix with 4 elements
matrix = np.array([[1,0],[0,-1]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Diagnol Matrix
A square matrix(having equal number of rows and columns) is said to be a diagnol matrix when all the elements of the matrix except for the diagnol is zero.
"""

#Creating a Diagnol Matrix using Numpy
#Creating a Diagnol Matrix with 4 elements
matrix = np.array([[7,0],[0,3]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Scalar Matrix
Matrix having same elements in the diagnol and other elements as 0.
"""

#Creating a Scalar Matrix using Numpy
#Creating a Scalar Matrix with 6 elements
matrix = np.array([[2,0],[0,2]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Hermitian Matrix

"""

#Creating a Hermitian Matrix using Numpy
#Creating a Hermitian Matrix with 6 elements
matrix = np.array([[-1 , 1-3j , 0], [1+3j , 0 , -1j ], [0, 1j, 1]])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')

"""##Singular Matrix

# **Operations**
"""

#Creating a Row Matrix with 3 elements
matrix = np.array([1, 2, 3])

#Printing the elements present in the matrix
print(f'My Matrix :\n{matrix}')


#Displaying : Addition of 2 Matrices
print(f'\nAddition :\n{np.add(matrix,matrix)}')

#Displaying : Subtraction of 2 Matrices
print(f'Subtraction :\n{np.subtract(matrix,matrix)}')

#Displaying : Division of 2 Matrices
print(f'Division :\n{np.divide(matrix,matrix)}')

#Displaying : Multiplication of 2 Matrices
print(f'Multiplication :\n{np.multiply(matrix,matrix)}')

#Displaying : Square Root of a Matrix
print(f'Square Root :\n{np.sqrt(matrix)}')

#Displaying : Summation of a Matrix
print(f'Summation :\n{np.sum(matrix)}')

#Displaying : Matrix Transposition of a Matrix
#print(f'Matrix Transposition :\n{matrix.T}')